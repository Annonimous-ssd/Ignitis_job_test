/*
 * This file is generated by jOOQ.
 */
package com.example.ignitis_job_test.JooqGenerated.tables;


import com.example.ignitis_job_test.JooqGenerated.Ignitis;
import com.example.ignitis_job_test.JooqGenerated.Keys;
import com.example.ignitis_job_test.JooqGenerated.tables.records.AdminsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Admins extends TableImpl<AdminsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>IGNITIS.ADMINS</code>
     */
    public static final Admins ADMINS = new Admins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminsRecord> getRecordType() {
        return AdminsRecord.class;
    }

    /**
     * The column <code>IGNITIS.ADMINS.ID</code>.
     */
    public final TableField<AdminsRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>IGNITIS.ADMINS.ADMIN_NAME</code>.
     */
    public final TableField<AdminsRecord, String> ADMIN_NAME = createField(DSL.name("ADMIN_NAME"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>IGNITIS.ADMINS.CREATED_BY</code>.
     */
    public final TableField<AdminsRecord, String> CREATED_BY = createField(DSL.name("CREATED_BY"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>IGNITIS.ADMINS.REGISTRATION_TIME</code>.
     */
    public final TableField<AdminsRecord, LocalDateTime> REGISTRATION_TIME = createField(DSL.name("REGISTRATION_TIME"), SQLDataType.LOCALDATETIME(6), this, "");

    private Admins(Name alias, Table<AdminsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admins(Name alias, Table<AdminsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>IGNITIS.ADMINS</code> table reference
     */
    public Admins(String alias) {
        this(DSL.name(alias), ADMINS);
    }

    /**
     * Create an aliased <code>IGNITIS.ADMINS</code> table reference
     */
    public Admins(Name alias) {
        this(alias, ADMINS);
    }

    /**
     * Create a <code>IGNITIS.ADMINS</code> table reference
     */
    public Admins() {
        this(DSL.name("ADMINS"), null);
    }

    public <O extends Record> Admins(Table<O> child, ForeignKey<O, AdminsRecord> key) {
        super(child, key, ADMINS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Ignitis.IGNITIS;
    }

    @Override
    public Identity<AdminsRecord, Long> getIdentity() {
        return (Identity<AdminsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AdminsRecord> getPrimaryKey() {
        return Keys.PK_ADMINS;
    }

    @Override
    public List<UniqueKey<AdminsRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.UK_USERS_ADMIN_NAME);
    }

    @Override
    public Admins as(String alias) {
        return new Admins(DSL.name(alias), this);
    }

    @Override
    public Admins as(Name alias) {
        return new Admins(alias, this);
    }

    @Override
    public Admins as(Table<?> alias) {
        return new Admins(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(String name) {
        return new Admins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(Name name) {
        return new Admins(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(Table<?> name) {
        return new Admins(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
